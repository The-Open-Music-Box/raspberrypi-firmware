#!/usr/bin/env python3
"""Diagnostic d√©taill√© pour WM8960 - probl√®me d'absence de son.

Ce script teste chaque composant individuellement pour identifier pourquoi
pygame s'initialise correctement mais aucun son ne sort.
"""

import os
import sys
import subprocess
import time
from pathlib import Path

# Add app to path
sys.path.insert(0, str(Path(__file__).parent))

def run_command(cmd, description, capture=True, timeout=5):
    """Execute une commande et affiche le r√©sultat."""
    print(f"\nüîç {description}")
    print(f"Commande: {' '.join(cmd) if isinstance(cmd, list) else cmd}")
    try:
        if isinstance(cmd, str):
            result = subprocess.run(cmd, shell=True, capture_output=capture, text=True, timeout=timeout)
        else:
            result = subprocess.run(cmd, capture_output=capture, text=True, timeout=timeout)

        print(f"Return code: {result.returncode}")
        if capture:
            if result.stdout.strip():
                print(f"STDOUT:\n{result.stdout}")
            if result.stderr.strip():
                print(f"STDERR:\n{result.stderr}")
        return result.returncode == 0
    except subprocess.TimeoutExpired:
        print(f"‚ùå Timeout apr√®s {timeout}s")
        return False
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def test_alsa_devices():
    """Test la configuration ALSA."""
    print("=" * 60)
    print("üîä TESTS ALSA")
    print("=" * 60)

    # Liste des devices
    run_command(["aplay", "-l"], "Liste des devices ALSA")

    # Test du device WM8960 sp√©cifiquement
    run_command(["aplay", "-D", "hw:wm8960soundcard", "--list-pcms"], "Test device WM8960")

    # Mixer settings
    run_command(["amixer", "scontents"], "Contr√¥les mixer ALSA")

    # Test aplay avec fichier test
    run_command(["aplay", "-D", "hw:wm8960soundcard,0", "/usr/share/sounds/alsa/Front_Center.wav"],
               "Test aplay direct sur WM8960")

def test_pygame_basic():
    """Test pygame de base."""
    print("=" * 60)
    print("üêç TESTS PYGAME BASIC")
    print("=" * 60)

    try:
        import pygame
        print(f"‚úÖ pygame version: {pygame.version.ver}")

        # Test sans configuration SDL sp√©ciale
        print("\nüîç Test pygame sans configuration SDL...")
        pygame.mixer.quit()  # Nettoie l'√©tat pr√©c√©dent
        pygame.mixer.pre_init(frequency=44100, size=-16, channels=2, buffer=4096)
        pygame.mixer.init()

        if pygame.mixer.get_init():
            init_info = pygame.mixer.get_init()
            print(f"‚úÖ pygame mixer init r√©ussi: {init_info}")
        else:
            print("‚ùå pygame mixer init √©chou√©")
            return False

        pygame.mixer.quit()
        return True
    except Exception as e:
        print(f"‚ùå Erreur pygame: {e}")
        return False

def test_pygame_wm8960():
    """Test pygame avec configuration WM8960."""
    print("=" * 60)
    print("üéµ TESTS PYGAME + WM8960")
    print("=" * 60)

    try:
        import pygame

        # Configuration SDL pour WM8960
        print("\nüîç Configuration SDL pour WM8960...")
        os.environ['SDL_AUDIODRIVER'] = 'alsa'
        os.environ['SDL_AUDIODEV'] = 'hw:wm8960soundcard,0'
        print(f"SDL_AUDIODRIVER: {os.environ['SDL_AUDIODRIVER']}")
        print(f"SDL_AUDIODEV: {os.environ['SDL_AUDIODEV']}")

        # Clean previous state
        try:
            pygame.mixer.quit()
        except:
            pass

        # Initialize pygame mixer
        pygame.mixer.pre_init(frequency=44100, size=-16, channels=2, buffer=4096)
        pygame.mixer.init()

        if pygame.mixer.get_init():
            init_info = pygame.mixer.get_init()
            print(f"‚úÖ pygame mixer WM8960 init r√©ussi: {init_info}")
        else:
            print("‚ùå pygame mixer WM8960 init √©chou√©")
            return False

        # Test avec un fichier audio simple
        test_file = "/usr/share/sounds/alsa/Front_Center.wav"
        if Path(test_file).exists():
            print(f"\nüîç Test lecture avec pygame: {test_file}")
            pygame.mixer.music.load(test_file)
            pygame.mixer.music.play()

            print("üéµ Lecture d√©marr√©e, attente 3 secondes...")
            time.sleep(3)

            if pygame.mixer.music.get_busy():
                print("üéµ pygame.mixer.music.get_busy() = True")
            else:
                print("üéµ pygame.mixer.music.get_busy() = False")

            pygame.mixer.music.stop()
        else:
            print(f"‚ùå Fichier test non trouv√©: {test_file}")

        pygame.mixer.quit()
        return True

    except Exception as e:
        print(f"‚ùå Erreur pygame WM8960: {e}")
        return False

def test_wm8960_backend():
    """Test du WM8960AudioBackend."""
    print("=" * 60)
    print("üéõÔ∏è TEST WM8960AUDIOBACKEND")
    print("=" * 60)

    try:
        from app.src.domain.audio.backends.implementations.wm8960_audio_backend import WM8960AudioBackend

        print("üîç Initialisation WM8960AudioBackend...")
        backend = WM8960AudioBackend()
        print("‚úÖ Backend initialis√©")

        # Test avec fichier
        test_file = "/usr/share/sounds/alsa/Front_Center.wav"
        if Path(test_file).exists():
            print(f"\nüîç Test playback: {test_file}")
            success = backend.play_file(test_file)
            print(f"play_file() result: {success}")

            if success:
                print("üéµ Lecture d√©marr√©e, attente 3 secondes...")
                time.sleep(3)

                print(f"is_playing: {backend.is_playing}")
                print(f"is_busy: {backend.is_busy}")

                backend.stop()
            else:
                print("‚ùå √âchec du d√©marrage de la lecture")
        else:
            print(f"‚ùå Fichier test non trouv√©: {test_file}")

        backend.cleanup()
        print("‚úÖ Backend nettoy√©")
        return True

    except Exception as e:
        print(f"‚ùå Erreur WM8960AudioBackend: {e}")
        import traceback
        traceback.print_exc()
        return False

def check_system_audio():
    """V√©rifications syst√®me audio."""
    print("=" * 60)
    print("üîß V√âRIFICATIONS SYST√àME")
    print("=" * 60)

    # Process audio
    run_command(["ps", "aux"], "Processus syst√®me (grep audio dans la sortie)", capture=True)

    # Modules kernel
    run_command(["lsmod"], "Modules kernel charg√©s (grep snd dans la sortie)", capture=True)

    # Device tree overlays
    run_command(["cat", "/boot/firmware/config.txt"], "Configuration device tree", capture=True)

def main():
    """Test principal."""
    print("üß™ DIAGNOSTIC D√âTAILL√â WM8960 - ABSENCE DE SON")
    print("=" * 80)

    # Tests √©tape par √©tape
    test_alsa_devices()
    test_pygame_basic()
    test_pygame_wm8960()
    test_wm8960_backend()
    check_system_audio()

    print("\n" + "=" * 80)
    print("üèÅ DIAGNOSTIC TERMIN√â")
    print("=" * 80)

if __name__ == "__main__":
    main()